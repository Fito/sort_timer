#include "Quick.h"#include <iostream>Quick::Quick() : Sort() {};double Quick::sort() {  time_point<system_clock> start, end;  duration<double> elapsed_seconds;  double total_runtime = 0.0;  // start clock  start =  system_clock::now();  quickSort(0, number_of_items - 1);  // stop clock  end =  system_clock::now();  // add runtime to total_runtime  elapsed_seconds = end - start;  return elapsed_seconds.count();}void Quick::quickSort(int first_index, int last_index ){    int pivotElement;    if(first_index < last_index)    {        pivotElement = pivot(first_index, last_index);        quickSort(first_index, pivotElement-1);        quickSort(pivotElement+1, last_index);    }}int Quick::pivot(int first, int last){  list<int>::iterator pivot_iterator = random_list->begin();  list<int>::iterator first_iterator = random_list->begin();  list<int>::iterator iterator = first_iterator;  int pivot = first;  for(int i = 0; i < first; i++) { first_iterator++; }  iterator = first_iterator;  for(int i = first + 1; i <= last; i++, iterator++)  {      if(*iterator <= *first_iterator)      {        pivot++;        iter_swap(iterator, first_iterator);      }  }  for(int i = 0; i < pivot; i++) { pivot_iterator++; }  iter_swap(pivot_iterator, first_iterator);  return pivot;}