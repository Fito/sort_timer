#include "Quick.h"#include <iostream>Quick::Quick() : Sort() {};double Quick::sort() {  time_point<system_clock> start, end;  duration<double> elapsed_seconds;  double total_runtime = 0.0;  // start clock  start =  system_clock::now();  quickSort(0, number_of_items - 1);  // stop clock  end =  system_clock::now();  // add runtime to total_runtime  elapsed_seconds = end - start;  return elapsed_seconds.count();}int Quick::getElement(int index) {  list<int>::const_iterator iterator = random_list->begin();  for(int i = 0; i < index; i++) {    iterator++;  }  return *iterator;}void Quick::quickSort(int first_index, int last_index ){    int pivotElement;    if(first_index < last_index)    {        pivotElement = pivot(first_index, last_index);        quickSort(first_index, pivotElement-1);        quickSort(pivotElement+1, last_index);    }}void Quick::swap(int first_index, int second_index) {  list<int>::iterator first_iterator = random_list->begin();  list<int>::iterator second_iterator = random_list->begin();  for(int i = 0; i < first_index; i++) {    first_iterator++;  }  for(int i = 0; i < second_index; i++) {    second_iterator++;  }  iter_swap(first_iterator, second_iterator);}int Quick::pivot(int first, int last){  int pivot = first;  int pivotElement = getElement(first);  for(int i = first + 1; i <= last; i++)  {      /* If you want to sort the list in the other order, change "<=" to ">" */      if(getElement(i) <= pivotElement)      {        pivot++;        swap(i, pivot);      }  }  swap(pivot, first);  return pivot;}