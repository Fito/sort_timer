#include "Radix.h"#include <math.h>using namespace std;Radix::Radix() : Sort() {};double Radix::sort() {  time_point<system_clock> start, end;  duration<double> elapsed_seconds;  double total_runtime = 0.0;  list<int> *listArray = new list<int>[10];  int counter[10] = {0,0,0,0,0,0,0,0,0,0};  // start timer  start =  system_clock::now();  // j = 2 because we only insert 3 digit elements  for (int j = 0; j <= 2; j++) {    list<int>::iterator iterator = random_list->begin();    for (int i = 0; i < number_of_items; i++, iterator++)    {      int ith_element = *iterator;      int k = (ith_element % int(pow(10, j + 1))) / int(pow(10, j)); // jth digit of list[i]      listArray[k].push_back(ith_element);      counter[k]++;    }    random_list->clear();    for(int x = 0; x < 10; x++) {      list<int> *current_list = &(listArray[x]);      for(list<int>::const_iterator iterator = current_list->begin(); iterator != current_list->end(); iterator++){        random_list->push_back(*iterator);      }    }    for(int c = 0; c < 10; c++) { counter[c] = 0; }    delete[] listArray;    listArray = new list<int>[10];  }  // stop timer  end =  system_clock::now();  // add runtime to total_runtime  elapsed_seconds = end - start;  return elapsed_seconds.count();}